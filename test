<!DOCTYPE html>

<html lang="en">

<head>

    <meta charset="UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Doctor's Notes</title>

    <style>

        /* Simplified but still beautiful styles */

        :root {

            --primary: #1a73e8;

            --primary-light: #e8f0fe;

            --danger: #d32f2f;

        }

        body {

            font-family: 'Segoe UI', Roboto, sans-serif;

            line-height: 1.6;

            color: #202124;

            background: #f8f9fa;

            margin: 0;

            padding: 20px;

        }

        .header {

            background: linear-gradient(135deg, #1a73e8, #0d47a1);

            color: white;

            padding: 15px 20px;

            border-radius: 10px;

            margin-bottom: 20px;

        }

        .patient-name {

            font-size: 1.5rem;

            margin: 0;

        }

        /* Red line divider - thicker and more prominent */
        .red-divider {
            border-top: 3px solid #d32f2f;
            margin: 25px 0;
            width: 100%;
        }

        /* Divider style */

        .divider {

            border-top: 2px solid #e0e0e0;

            margin: 30px 0;

        }

        /* Notes header matching vital signs style */

        .notes-header {

            display: flex;

            justify-content: space-between;

            align-items: center;

            margin-bottom: 20px;

        }

        .notes-title {

            color: var(--primary);

            margin: 0;

            display: flex;

            align-items: center;

        }

        .icon {

            width: 20px;

            height: 20px;

            margin-right: 10px;

        }

        .add-note-btn {

            background: var(--primary);

            color: white;

            border: none;

            padding: 10px 20px;

            border-radius: 6px;

            font-weight: 600;

            cursor: pointer;

            display: flex;

            align-items: center;

            transition: all 0.2s;

        }

        .add-note-btn:hover {

            background: #0d5bba;

        }

        .add-note-btn svg {

            margin-right: 8px;

            width: 16px;

            height: 16px;

        }

        /* Outlined note items */

        .note-item {

            background: white;

            border: 3px solid #e0e0e0; /* Thicker border */
            border-radius: 8px;

            margin-bottom: 20px;

            overflow: hidden;

            box-shadow: 0 3px 6px rgba(0,0,0,0.1); /* Slightly stronger shadow */
        }

        /* Hover effect for cards */
        .note-item:hover {
            border-color: #1a73e8; /* Blue border on hover */
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }

        /* Active (expanded) state */
        .note-item.expanded {
            border-color: #1a73e8;
        }

        .note-header {

            padding: 15px;

            cursor: pointer;

            transition: all 0.2s;

            display: flex;

            justify-content: space-between;

            align-items: center;

        }

        .note-header:hover {

            background-color: #f8f9fa;

        }

        .note-date {

            font-weight: 600;

            color: var(--primary);

            margin-bottom: 5px;

        }

        .note-doctor {

            font-size: 0.85rem;

            color: #5f6368;

        }

        .note-summary {

            color: #5f6368;

            font-size: 0.9rem;

            margin-top: 5px;

        }

        .note-content {

            padding: 0 15px;

            max-height: 0;

            overflow: hidden;

            transition: max-height 0.3s ease;

        }

        .note-content.active {

            padding: 0 15px 15px 15px;

            max-height: 500px;

            border-top: 1px solid #eee;

        }

        .note-detail {

            margin-bottom: 10px;

        }

        .note-detail-label {

            font-weight: 600;

            color: #5f6368;

            font-size: 0.9rem;

        }

        .note-diagnosis {

            color: var(--danger);

            font-weight: 600;

        }

        .expand-icon {

            transition: transform 0.3s ease;

        }

        .expand-icon.active {

            transform: rotate(180deg);

        }

        .show-more-btn {

            background: var(--primary-light);

            color: var(--primary);

            border: none;

            padding: 10px 20px;

            border-radius: 6px;

            font-weight: 600;

            cursor: pointer;

            display: block;

            margin: 20px auto 0;

            transition: all 0.2s;

        }

        .show-more-btn:hover {

            background: var(--primary);

            color: white;

        }

        .loading {

            text-align: center;

            padding: 20px;

            color: #5f6368;

        }

    </style>

</head>

<body>

    

    <div class="red-divider"></div>

    <div class="notes-container">

        <div class="notes-header">

            <h2 class="notes-title">

                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">

                    <path d="M12 19l7-7 3 3-7 7-3-3z"></path>

                    <path d="M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z"></path>

                    <path d="M2 2l7.586 7.586"></path>

                    <circle cx="11" cy="11" r="2"></circle>

                </svg>

                Clinical Notes

            </h2>

            <button class="add-note-btn" id="addNoteBtn">

                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">

                    <path d="M12 5v14M5 12h14"></path>

                </svg>

                Add Note

            </button>

        </div>

        <div id="notesContainer">

            <div class="loading">Loading notes...</div>

        </div>

        <button id="showMoreBtn" class="show-more-btn" style="display: none;">Show More Notes</button>

    </div>

    <script>

        // Configuration

        const PATIENT_ID = 2; // Set your patient ID

        const API_TOKEN = 'W9VpqXB6LbtdBOOVpjiLa8kgR1NzYCW7'; // Your API token

        const NOTES_TABLE_ID = 497974; // Your table ID

        // DOM Elements

        const notesContainer = document.getElementById('notesContainer');

        const addNoteBtn = document.getElementById('addNoteBtn');

        const showMoreBtn = document.getElementById('showMoreBtn');

        // State variables

        let allNotes = [];

        let displayedNotes = 3;

        // API endpoints

        const API_BASE = 'https://api.baserow.io/api/database/rows/table';

        const NOTES_URL = `${API_BASE}/${NOTES_TABLE_ID}/?user_field_names=true&filter__field_3930959__contains=${PATIENT_ID}`;

        // Fetch notes from Baserow

        async function fetchNotes() {

            try {

                const response = await fetch(NOTES_URL, {

                    headers: {

                        'Authorization': `Token ${API_TOKEN}`

                    }

                });

                if (!response.ok) throw new Error('Failed to fetch notes');

                const data = await response.json();

                allNotes = data.results;

                displayNotes();

            } catch (error) {

                notesContainer.innerHTML = `<div class="error">Error loading notes: ${error.message}</div>`;

                console.error('Error:', error);

            }

        }

        // Display notes (showing only the specified number)

        function displayNotes() {

            if (!allNotes || allNotes.length === 0) {

                notesContainer.innerHTML = '<div class="no-notes">No clinical notes found</div>';

                showMoreBtn.style.display = 'none';

                return;

            }

            // Sort by date (newest first)

            allNotes.sort((a, b) => new Date(b.Date) - new Date(a.Date));

            const notesToShow = allNotes.slice(0, displayedNotes);

            let html = '';

            notesToShow.forEach((note, index) => {

                const date = note.Date ? new Date(note.Date).toLocaleDateString() : 'No date';

                const diagnosis = note.Diagnosis || 'No diagnosis recorded';

                html += `

                    <div class="note-item">

                        <div class="note-header" onclick="toggleNote(${index})">

                            <div>

                                <div class="note-date">${date}</div>

                                <div class="note-doctor">${note.Doctor || 'Unknown Doctor'}</div>

                                <div class="note-summary">${diagnosis}</div>

                            </div>

                            <svg class="expand-icon" viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">

                                <path d="M19 9l-7 7-7-7"></path>

                            </svg>

                        </div>

                        <div class="note-content" id="noteContent${index}">

                            <div class="note-detail">

                                <div class="note-detail-label">Presenting Complaints</div>

                                <div>${note['Presenting Complaints'] || 'None recorded'}</div>

                            </div>

                            <div class="note-detail">

                                <div class="note-detail-label">Examination Findings</div>

                                <div>${note['Examination Findings'] || 'None recorded'}</div>

                            </div>

                            <div class="note-detail">

                                <div class="note-detail-label">Diagnosis</div>

                                <div class="note-diagnosis">${diagnosis}</div>

                            </div>

                            <div class="note-detail">

                                <div class="note-detail-label">Plan</div>

                                <div>${note.Plan || 'None recorded'}</div>

                            </div>

                        </div>

                    </div>

                `;

            });

            notesContainer.innerHTML = html;

            // Show "Show More" button if there are more notes to display

            if (allNotes.length > displayedNotes) {

                showMoreBtn.style.display = 'block';

            } else {

                showMoreBtn.style.display = 'none';

            }

            // Store all notes data for popup access

            window.notesData = allNotes;

        }

        // Toggle note details

        function toggleNote(index) {

            const content = document.getElementById(`noteContent${index}`);

            const icon = content.previousElementSibling.querySelector('.expand-icon');

            content.classList.toggle('active');

            icon.classList.toggle('active');

        }

        // Show more notes

        function showMoreNotes() {

            displayedNotes += 3;

            displayNotes();

        }

        // Open popup window for adding new note

        function openNoteForm() {

            const formContent = `

                <!DOCTYPE html>

                <html>

                <head>

                    <title>Add New Clinical Note</title>

                    <style>

                        body {

                            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;

                            line-height: 1.6;

                            color: #333;

                            padding: 20px;

                            max-width: 600px;

                            margin: 0 auto;

                        }

                        h2 {

                            color: #1a73e8;

                            border-bottom: 2px solid #e0e0e0;

                            padding-bottom: 10px;

                            margin-top: 0;

                        }

                        .form-group {

                            margin-bottom: 15px;

                        }

                        label {

                            display: block;

                            margin-bottom: 5px;

                            font-weight: 600;

                        }

                        input, textarea, select {

                            width: 100%;

                            padding: 8px;

                            border: 1px solid #ddd;

                            border-radius: 4px;

                        }

                        textarea {

                            min-height: 100px;

                            resize: vertical;

                        }

                        .form-actions {

                            margin-top: 20px;

                            text-align: right;

                        }

                        button {

                            padding: 8px 16px;

                            border: none;

                            border-radius: 4px;

                            cursor: pointer;

                        }

                        .btn-primary {

                            background: #1a73e8;

                            color: white;

                        }

                        .btn-secondary {

                            background: #f1f3f4;

                            color: #5f6368;

                            margin-right: 10px;

                        }

                    </style>

                </head>

                <body>

                    <h2>Add New Clinical Note</h2>

                    <form id="noteForm">

                        <div class="form-group">

                            <label for="noteDate">Date</label>

                            <input type="date" id="noteDate" required>

                        </div>

                        <div class="form-group">

                            <label for="noteComplaints">Presenting Complaints</label>

                            <textarea id="noteComplaints" rows="3"></textarea>

                        </div>

                        <div class="form-group">

                            <label for="noteFindings">Examination Findings</label>

                            <textarea id="noteFindings" rows="3"></textarea>

                        </div>

                        <div class="form-group">

                            <label for="noteDiagnosis">Diagnosis</label>

                            <input type="text" id="noteDiagnosis">

                        </div>

                        <div class="form-group">

                            <label for="notePlan">Plan</label>

                            <textarea id="notePlan" rows="3"></textarea>

                        </div>

                        <div class="form-actions">

                            <button type="button" class="btn-secondary" onclick="window.close()">Cancel</button>

                            <button type="submit" class="btn-primary">Save Note</button>

                        </div>

                    </form>

                    <script>

                        document.getElementById('noteDate').valueAsDate = new Date();

                        document.getElementById('noteForm').addEventListener('submit', function(e) {

                            e.preventDefault();

                            const noteData = {

                                field_3930959: ${PATIENT_ID},

                                Date: document.getElementById('noteDate').value,

                                Doctor: "Dr. Smith",

                                'Presenting Complaints': document.getElementById('noteComplaints').value,

                                'Examination Findings': document.getElementById('noteFindings').value,

                                Diagnosis: document.getElementById('noteDiagnosis').value,

                                Plan: document.getElementById('notePlan').value

                            };

                            window.opener.postMessage({ 

                                type: 'SUBMIT_DOCTOR_NOTE', 

                                data: noteData 

                            }, '*');

                            window.close();

                        });

                    <\/script>

                </body>

                </html>

            `;

            const popup = window.open('', 'AddDoctorNote', 'width=700,height=700,scrollbars=yes,resizable=yes');

            popup.document.write(formContent);

            popup.document.close();

        }

        // Handle form submission from popup

        window.addEventListener('message', async function(event) {

            if (event.data.type === 'SUBMIT_DOCTOR_NOTE') {

                try {

                    const response = await fetch(`${API_BASE}/${NOTES_TABLE_ID}/?user_field_names=true`, {

                        method: 'POST',

                        headers: {

                            'Authorization': `Token ${API_TOKEN}`,

                            'Content-Type': 'application/json'

                        },

                        body: JSON.stringify(event.data.data)

                    });

                    if (!response.ok) throw new Error('Failed to save note');

                    fetchNotes(); // Refresh the notes list

                } catch (error) {

                    alert('Error saving note: ' + error.message);

                    console.error('Error:', error);

                }

            }

        });

        // Make functions available globally

        window.toggleNote = toggleNote;

        // Event listeners

        addNoteBtn.addEventListener('click', openNoteForm);

        showMoreBtn.addEventListener('click', showMoreNotes);

        // Initialize

        document.addEventListener('DOMContentLoaded', fetchNotes);

        // Just modify the toggleNote function to add/remove expanded class
        function toggleNote(index) {
            const noteItem = document.getElementById(`noteContent${index}`).parentElement;
            const content = document.getElementById(`noteContent${index}`);
            const icon = content.previousElementSibling.querySelector('.expand-icon');
            
            noteItem.classList.toggle('expanded');
            content.classList.toggle('active');
            icon.classList.toggle('active');
        }
    </script>

    </script>

</body>

</html>
